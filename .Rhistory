setwd("E:/UW Lab jobs/2. ISING Occupancy model/3. Active Learning/Species_network_active_learning")
nspp = 6
linking = matrix(runif(nspp^2)<0.5,nspp,nspp)
linking = linking * t(linking)
raster::plot(raster::raster(linking))
linking = matrix(runif(nspp^2)<0.7,nspp,nspp)
linking = linking * t(linking)
raster::plot(raster::raster(linking))
nspp = 6
linking = matrix(runif(nspp^2)<0.7,nspp,nspp)
linking = linking * t(linking)
diag(linking) = 0
nspp = 6
set.seed(42)
linking = matrix(runif(nspp^2)<0.7,nspp,nspp)
linking = linking * t(linking)
diag(linking) = 0
raster::plot(raster::raster(linking))
linking = matrix(runif(nspp^2)<0.7,nspp,nspp)
linking = linking * t(linking)
diag(linking) = 0
raster::plot(raster::raster(linking))
set.seed(12345)
linking = matrix(runif(nspp^2)<0.7,nspp,nspp)
linking = linking * t(linking)
diag(linking) = 0
raster::plot(raster::raster(linking))
strength = matrix(runif(nspp^2),nspp,nspp)
strength = .5*(strength+t(strength))
graph = strength * linking
raster::plot(raster::raster(graph))
strength = matrix(runif(nspp^2,-1,1),nspp,nspp)
nspp = 6
set.seed(12345)
linking = matrix(runif(nspp^2)<0.7,nspp,nspp)
linking = linking * t(linking)
diag(linking) = 0
raster::plot(raster::raster(linking))
strength = matrix(runif(nspp^2,-1,1),nspp,nspp)
strength = .5*(strength+t(strength))
graph = strength * linking
raster::plot(raster::raster(graph))
landscape = matrix(runif(nlat*nlat),nlat,nlat)
## generate some random environment
nlat = 20 # nlat*nlat grid (not really too important)
landscape = matrix(runif(nlat*nlat),nlat,nlat)
raster::plot(raster::raster(landscape))
env = matrix(c(1,2),1,2)
env
beta = matrix(runif(4),2,2)
nspp = ncol(beta)
require(IsingSampler)
thr = env%*%beta
graph = matrix(c(0,0.5,0.5,0),2,2)
res = IsingSampler(thresholds = thr,graph = graph,responses = c(-1L,1L))
n = 1
res = IsingSampler(thresholds = thr,graph = graph,responses = c(-1L,1L),n=n,method = "CFTP")
res
beta = matrix(runif(4,-1,1),2,2)
nspp = ncol(beta)
require(IsingSampler)
thr = env%*%beta
res = IsingSampler(thresholds = thr,graph = graph,responses = c(-1L,1L),n=n,method = "CFTP")
res
res = IsingSampler(thresholds = thr,graph = graph,responses = c(-1L,1L),n=n,method = "CFTP")
res
n=10
res = IsingSampler(thresholds = thr,graph = graph,responses = c(-1L,1L),n=n,method = "CFTP")
res
graph = matrix(c(0,0.3,0.3,0),2,2)
res = IsingSampler(thresholds = thr,graph = graph,responses = c(-1L,1L),n=n,method = "CFTP")
res
## generate a random graph
source("misc.R")
betas = matrix(runif(2*nspp),2,nspp)
env = cbind(1,landscape)
View(env)
landscape = (runif(nlat*nlat))
raster::plot(raster::raster(landscape,nlat,nlat))
raster::plot(raster::raster(matrix(landscape,nlat,nlat)))
betas = matrix(runif(2*nspp),2,nspp)
env = cbind(1,landscape)
View(env)
betas = matrix(runif(2*nspp,-1,1),2,nspp)
env = cbind(1,landscape)
Z_sample = apply(env,2,sampleZ,betas,graph,1)
Z_sample = apply(env,2,SampleZ,betas,graph,1)
env
Z_sample = apply(env,1,SampleZ,betas,graph,1)
Z_sample
Z_sample = apply(env,1,SampleZ,betas,graph,1)
thr
beta
betas = matrix(runif(2*nspp,-1,1),2,nspp)
nspp = 6
betas = matrix(runif(2*nspp,-1,1),2,nspp)
env = cbind(1,landscape)
Z_sample = apply(env,1,SampleZ,betas,graph,1)
Z_sample = apply(env,1,SampleZ,betas,graph,1)
## generate a random graph
source("misc.R")
nspp = 6
set.seed(12345)
linking = matrix(runif(nspp^2)<0.7,nspp,nspp)
linking = linking * t(linking)
diag(linking) = 0
raster::plot(raster::raster(linking))
strength = matrix(runif(nspp^2,-1,1),nspp,nspp)
strength = .5*(strength+t(strength))
graph = strength * linking
raster::plot(raster::raster(graph))
## generate some random environment
nlat = 20 # nlat*nlat grid (not really too important)
landscape = (runif(nlat*nlat))
raster::plot(raster::raster(matrix(landscape,nlat,nlat)))
betas = matrix(runif(2*nspp,-1,1),2,nspp)
env = cbind(1,landscape)
Z_sample = apply(env,1,SampleZ,betas,graph,1)
View(Z_sample)
raster::plot(raster::raster(matrix(Z_sample[1,],nlat,nlat)))
raster::plot(raster::raster(matrix(Z_sample[2,],nlat,nlat)))
raster::plot(raster::raster(matrix(Z_sample[3,],nlat,nlat)))
raster::plot(raster::raster(matrix(Z_sample[4,],nlat,nlat)))
raster::plot(raster::raster(matrix(Z_sample[5,],nlat,nlat)))
raster::plot(raster::raster(matrix(Z_sample[6,],nlat,nlat)))
nspp = 5
set.seed(12345)
linking = matrix(runif(nspp^2)<0.7,nspp,nspp)
linking = linking * t(linking)
diag(linking) = 0
raster::plot(raster::raster(linking))
strength = matrix(runif(nspp^2,-1,1),nspp,nspp)
strength = .5*(strength+t(strength))
graph = strength * linking
raster::plot(raster::raster(graph))
## generate some random environment
nlat = 20 # nlat*nlat grid (not really too important)
set.seed(42)
linking = matrix(runif(nspp^2)<0.7,nspp,nspp)
linking = linking * t(linking)
diag(linking) = 0
raster::plot(raster::raster(linking))
strength = matrix(runif(nspp^2,-1,1),nspp,nspp)
strength = .5*(strength+t(strength))
set.seed(1996)
linking = matrix(runif(nspp^2)<0.7,nspp,nspp)
linking = linking * t(linking)
diag(linking) = 0
raster::plot(raster::raster(linking))
strength = matrix(runif(nspp^2,-1,1),nspp,nspp)
strength = .5*(strength+t(strength))
graph = strength * linking
raster::plot(raster::raster(graph))
## generate some random environment
nlat = 20 # nlat*nlat grid (not really too important)
landscape = (runif(nlat*nlat))
raster::plot(raster::raster(matrix(landscape,nlat,nlat)))
raster::plot(raster::raster(graph))
## generate some random environment
nlat = 20 # nlat*nlat grid (not really too important)
landscape = (runif(nlat*nlat))
raster::plot(raster::raster(matrix(landscape,nlat,nlat)))
betas = matrix(runif(2*nspp,-1,1),2,nspp)
env = cbind(1,landscape)
Z_sample = apply(env,1,SampleZ,betas,graph,1)
raster::plot(raster::raster(betas))
Z_sample = t(Z_sample)
graphPar = numeric()
graphPar
## generate a random graph
source("misc.R")
getGraphpar(Linking)
getGraphpar(Linking,5)
getGraphpar(linking,5)
## generate a random graph
source("misc.R")
getGraphpar(linking,5)
graphPar =  getGraphpar(linking,5)
getGraph(graphPar,5)
linking
graph==getGraph(getGraphpar(graph,5),5)
?IsingStateProb
Liklid = function(theta,s,env,nspp){
ncov = ncol(env)
nsite = nrow(env)
beta = matrix(theta[1:(ncov*nspp)],ncov,nspp)
thr = env%*%beta
graphpar = theta[(ncov*nspp+1):length(theta)]
graph = getGraph(graphpar)
sum(apply(matrix(1:nsite),1,function(k,s,thr,graph){
IsingStateProb(s[k,],graph,thr[k,],1,c(-1L,1L))
}))
}
as.vector(betas)
matrix(as.vector(betas),2,5)
betas
theta = c(as.vector(betas),getGraphpar(graph,5))
Liklid(theta,Z_sample,env,5)
Liklid = function(theta,s,env,nspp){
ncov = ncol(env)
nsite = nrow(env)
beta = matrix(theta[1:(ncov*nspp)],ncov,nspp)
thr = env%*%beta
graphpar = theta[(ncov*nspp+1):length(theta)]
graph = getGraph(graphpar,nspp)
sum(apply(matrix(1:nsite),1,function(k,s,thr,graph){
IsingStateProb(s[k,],graph,thr[k,],1,c(-1L,1L))
}))
}
Liklid(theta,Z_sample,env,5)
ncov = ncol(env)
nsite = nrow(env)
beta = matrix(theta[1:(ncov*nspp)],ncov,nspp)
thr = env%*%beta
graphpar = theta[(ncov*nspp+1):length(theta)]
graph = getGraph(graphpar,nspp)
k=1
## generate a random graph
source("misc.R")
## generate a random graph
source("misc.R")
Liklid(theta,Z_sample,env,5)
View(thr)
graph
Liklid = function(theta,s,env,nspp){
ncov = ncol(env)
nsite = nrow(env)
beta = matrix(theta[1:(ncov*nspp)],ncov,nspp)
thr = env%*%beta
graphpar = theta[(ncov*nspp+1):length(theta)]
graph = getGraph(graphpar,nspp)
sum(apply(matrix(1:nsite),1,function(k,s,thr,graph){
IsingStateProb(s[k,],graph,thr[k,],1,c(-1L,1L))
},s,graph,thr))
}
Liklid(theta,Z_sample,env,5)
## generate a random graph
source("misc.R")
Liklid(theta,Z_sample,env,5)
View(thr)
nsite
thr[400]
thr[400,]
## generate a random graph
source("misc.R")
Liklid(theta,Z_sample,env,5)
## generate a random graph
source("misc.R")
Liklid(theta,Z_sample,env,5)
## generate a random graph
source("misc.R")
## generate a random graph
source("misc.R")
theta_ini = runif(length(theta),-1,1)
MLE_full = optim(theta_ini,logLik,Z_sample,env,5)
## generate a random graph
source("misc.R")
MLE_full = optim(theta_ini,logLik,s=Z_sample,env=env,nspp=5)
MLE_full$convergence
MLE_full$message
?optim
MLE_full = optim(theta_ini,logLik,s=Z_sample,env=env,nspp=5,control = list(maxit=1000))
## generate a random graph
source("misc.R")
MLE_full = optim(theta_ini,logLik,s=Z_sample,env=env,nspp=5,control = list(maxit=500))
MLE_full$convergence
MLE_full$message
MLE_full = optim(theta_ini,logLik,s=Z_sample,env=env,nspp=5,control = list(maxit=1000))
Liklid(theta,Z_sample,env,5)
Liklid(theta_ini,Z_sample,env,5)
## generate a random graph
source("misc.R")
Liklid(theta_ini,Z_sample,env,5)
Liklid(theta_ini,Z_sample,env,5)
## generate a random graph
source("misc.R")
Liklid(theta_ini,Z_sample,env,5)
Liklid(theta_ini,Z_sample,env,5)
Liklid(theta_ini,Z_sample,env,5)
logLik = function(theta,s,env,nspp){
ncov = ncol(env)
nsite = nrow(env)
beta = matrix(theta[1:(ncov*nspp)],ncov,nspp)
thr = env%*%beta
graphpar = theta[(ncov*nspp+1):length(theta)]
graph = getGraph(graphpar,nspp)
logliki = sum(log(apply(matrix(1:nsite),1,function(k,s,thr,graph){
IsingStateProb(s[k,],graph,thr[k,],1,c(-1L,1L))
},s,thr,graph)))
return(-logliki)
}
Liklid(theta_ini,Z_sample,env,5)
## generate a random graph
source("misc.R")
Liklid(theta_ini,Z_sample,env,5)
logLik(theta_ini,Z_sample,env,5)
logLik(theta,Z_sample,env,5)
logLik(theta+runif(length(theta)),Z_sample,env,5)
logLik(theta+runif(length(theta)),Z_sample,env,5)
logLik(theta+runif(length(theta)),Z_sample,env,5)
logLik(theta+runif(length(theta)),Z_sample,env,5)
logLik(theta+runif(length(theta)),Z_sample,env,5)
logLik(theta+runif(length(theta)),Z_sample,env,5)
logLik(theta+runif(length(theta)),Z_sample,env,5)
logLik(theta+0.05*runif(length(theta)),Z_sample,env,5)
MLE_full = optim(theta_ini,logLik,s=Z_sample,env=env,nspp=5,control = list(maxit=1000))
theta_ini = theta + 0.5*runif(length(theta),-1,1)
MLE_full = optim(theta_ini,logLik,s=Z_sample,env=env,nspp=5,control = list(maxit=1000))
MLE_full$convergence
MLE_full = optim(theta_ini,logLik,s=Z_sample,env=env,nspp=5,method = "L-BFGS-B",control = list(maxit=1000))
theta_ini = theta + 0.05*runif(length(theta),-1,1)
MLE_full = optim(theta_ini,logLik,s=Z_sample,env=env,nspp=5,method = "L-BFGS-B",control = list(maxit=1000))
MLE_full$convergence
MLE_full$value
graphpar = MLE_full$par[-1:length(betas)]
graphpar = MLE_full$par[-(1:length(betas))]
graphpar_est = MLE_full$par[-(1:length(betas))]
raster::plot(raster::raster(getGraph(graphpar_est)))
raster::plot(raster::raster(getGraph(graphpar_est,5)))
raster::plot(raster::raster(graph))
raster::plot(raster::raster(getGraph(graphpar_est,5)))
raster::plot(raster::raster(graph))
raster::plot(raster::raster((getGraph(graphpar_est,5)-graph)^2))
raster::plot(raster::raster(sqrt(getGraph(graphpar_est,5)-graph)^2)/graph)
relatgraph = graph
diag(relatgraph)=1
raster::plot(raster::raster(sqrt(getGraph(graphpar_est,5)-graph)^2)/relatgraph)
raster::plot(raster::raster(sqrt((getGraph(graphpar_est,5)-graph)^2))/relatgraph)
raster::plot(raster::raster(((getGraph(graphpar_est,5)-graph)^2))/relatgraph)
raster::plot(raster::raster(
((getGraph(graphpar_est,5)-graph)^2)/relatgraph)
)
raster::plot(raster::raster(
(sqrt(getGraph(graphpar_est,5)-graph)^2)/relatgraph)
)
raster::plot(raster::raster(
((getGraph(graphpar_est,nspp)-graph)^2)/relatgraph)
)
raster::plot(raster::raster(
((getGraph(graphpar_est,nspp)-graph))/relatgraph)
)
raster::plot(raster::raster(graph))
raster::plot(raster::raster(linking))
raster::plot(raster::raster(
((getGraph(graphpar_est,nspp)-graph))/relatgraph)
)
nspp = 4
set.seed(1996)
linking = matrix(runif(nspp^2)<0.7,nspp,nspp)
linking = linking * t(linking)
diag(linking) = 0
raster::plot(raster::raster(linking))
strength = matrix(runif(nspp^2,-1,1),nspp,nspp)
strength = .5*(strength+t(strength))
graph = strength * linking
raster::plot(raster::raster(graph))
nspp = 5
set.seed(1996)
linking = matrix(runif(nspp^2)<0.7,nspp,nspp)
linking = linking * t(linking)
diag(linking) = 0
raster::plot(raster::raster(linking))
strength = matrix(runif(nspp^2,-1,1),nspp,nspp)
strength = .5*(strength+t(strength))
graph = strength * linking
raster::plot(raster::raster(graph))
## generate some random environment
nlat = 30 # nlat*nlat grid (not really too important)
landscape = (runif(nlat*nlat))
raster::plot(raster::raster(matrix(landscape,nlat,nlat)))
betas = matrix(runif(2*nspp,-1,1),2,nspp)
raster::plot(raster::raster(betas))
env = cbind(1,landscape)
## get some distribution
Z_sample = apply(env,1,SampleZ,betas,graph,1)
Z_sample = t(Z_sample)
## Alright, try full data
theta = c(as.vector(betas),getGraphpar(graph,nspp))
theta_ini = theta + 0.05*runif(length(theta),-1,1)
MLE_full = optim(theta_ini,logLik,s=Z_sample,env=env,nspp=5,method = "L-BFGS-B",control = list(maxit=1000))
MLE_full$convergence
graphpar_est = MLE_full$par[-(1:length(betas))]
relatgraph = graph
diag(relatgraph)=1
raster::plot(raster::raster(
((getGraph(graphpar_est,nspp)-graph))/relatgraph)
)
raster::plot(raster::raster(
((getGraph(graphpar_est,nspp)-graph)^2))
)
raster::plot(raster::raster(
(sqrt(getGraph(graphpar_est,nspp)-graph)^2))
)
33*33
raster::plot(raster::raster(getGraph(graphpar_est,nspp)))
raster::plot(raster::raster(graph))
raster::plot(raster::raster(abs(graph)))
raster::plot(raster::raster(abs(getGraph(graphpar_est,nspp))))
## generate a random graph
source("misc.R")
nspp = 4
set.seed(1996)
linking = matrix(runif(nspp^2)<0.7,nspp,nspp)
linking = linking * t(linking)
diag(linking) = 0
raster::plot(raster::raster(linking))
strength = matrix(runif(nspp^2,-1,1),nspp,nspp)
strength = .5*(strength+t(strength))
graph = strength * linking
raster::plot(raster::raster(graph))
## generate some random environment
nlat = 30 # nlat*nlat grid (not really too important)
landscape = (runif(nlat*nlat))
raster::plot(raster::raster(matrix(landscape,nlat,nlat)))
betas = matrix(runif(2*nspp,-1,1),2,nspp)
raster::plot(raster::raster(betas))
env = cbind(1,landscape)
## get some distribution
Z_sample = apply(env,1,SampleZ,betas,graph,1)
Z_sample = t(Z_sample)
## Alright, try full data
theta = c(as.vector(betas),getGraphpar(graph,nspp))
theta_ini = theta + 0.05*runif(length(theta),-1,1)
MLE_full = optim(theta_ini,logLik,s=Z_sample,env=env,nspp=5,method = "L-BFGS-B",control = list(maxit=1000))
MLE_full = optim(theta_ini,logLik,s=Z_sample,env=env,nspp=nspp,method = "L-BFGS-B",control = list(maxit=1000))
raster::plot(raster::raster(getGraph(graphpar_est,nspp)))
raster::plot(raster::raster(graph))
raster::plot(raster::raster(getGraph(graphpar_est,nspp)))
raster::plot(raster::raster(
(sqrt(getGraph(graphpar_est,nspp)-graph)^2))
)
raster::plot(raster::raster(getGraph(graphpar_est,nspp)))
raster::plot(raster::raster(graph))
graph
raster::plot(raster::raster(getGraph(graphpar_est,nspp)))
logLik(theta,Z_sample,env,4)
logLik(MLE_full$par,Z_sample,env,4)
raster::plot(raster::raster(graph))
graphpar_est = MLE_full$par[-(1:length(betas))]
relatgraph = graph
diag(relatgraph)=1
raster::plot(raster::raster(
(sqrt(getGraph(graphpar_est,nspp)-graph)^2))
)
raster::plot(raster::raster(getGraph(graphpar_est,nspp)))
raster::plot(raster::raster(graph))
raster::plot(raster::raster(
(sqrt(getGraph(graphpar_est,nspp)-graph)^2))
)
getGraph(graphpar_est,nspp)
graph
MLE_full$convergence
nspp = 4
set.seed(1996)
linking = matrix(runif(nspp^2)<0.7,nspp,nspp)
linking = linking * t(linking)
diag(linking) = 0
raster::plot(raster::raster(linking))
strength = matrix(runif(nspp^2,-.5,.5),nspp,nspp)
strength = .5*(strength+t(strength))
graph = strength * linking
raster::plot(raster::raster(graph))
## generate some random environment
nlat = 30 # nlat*nlat grid (not really too important)
## start active leaning
### first round
data_using = 90
Iter_1 = sample(nlat^2,data_using)
env_1 = env[Iter_1,]
env_1 = env[Iter_1,]
Z_sample_1 = Z_sample[Iter_1,]
MLE_1 = optim(theta_ini,logLik,s=Z_sample_1,env=env_1,nspp=nspp,method = "L-BFGS-B",control = list(maxit=1000))
graphpar_est = MLE_full$par[-(1:length(betas))]
graphpar_est_1 = MLE_1$par[-(1:length(betas))]
raster::plot(raster::raster(getGraph(graphpar_est_1,nspp)))
getwd
getwd()
ncov = 2
betas = matrix(theta[1:(ncov*nspp)],ncov,nspp)
graphpar = theta[(ncov*nspp+1):length(theta)]
graph = getGraph(graphpar,nspp)
Z_samples = SampleZ(env,betas,graph,1000)
View(Z_samples)
env
betas
View(relatgraph)
View(res)
apply(Z_samples,2,var)
Z_samples = SampleZ(env,betas,graph,5000)
apply(Z_samples,2,var)
## generate a random graph
source("misc.R")
FImap = apply(env,1,TrFI,MLE_1$par,nspp)
## generate a random graph
source("misc.R")
## generate a random graph
source("misc.R")
FImap = apply(env,1,TrFI,MLE_1$par,nspp)
## generate a random graph
source("misc.R")
FImap = apply(env,1,TrFI,MLE_1$par,nspp)
raster::plot(raster::raster(matrix(FImap,nlat,nlat)))
raster::plot(raster::raster(matrix(landscape,nlat,nlat)))
Sampled = matrix(0,1,nlat^2)
Sampled[,Iter_1]=1
raster::plot(raster::raster(matrix(Sampled,nlat,nlat)))
?max
?which
